# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'design.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from cryptography.fernet import Fernet
import os
import shutil
import datetime


class Ui_MainWindows(object):
    def setupUi(self, MainWindows):
        MainWindows.setObjectName("MainWindows")
        MainWindows.setFixedSize(679, 526)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon.ico"),
                       QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindows.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindows)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(9, 9, 225, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(10, 50, 651, 113))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("System")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.akunInput = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.akunInput.setFont(font)
        self.akunInput.setObjectName("akunInput")
        self.horizontalLayout_2.addWidget(self.akunInput)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_3 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("System")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_3.addWidget(self.label_3)
        self.usernameInput = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.usernameInput.setFont(font)
        self.usernameInput.setObjectName("usernameInput")
        self.horizontalLayout_3.addWidget(self.usernameInput)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_4 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("System")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_4.addWidget(self.label_4)
        self.passwordInput = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.passwordInput.setFont(font)
        self.passwordInput.setObjectName("passwordInput")
        self.horizontalLayout_4.addWidget(self.passwordInput)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(10, 210, 651, 281))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(2, item)
        self.tableWidget.horizontalHeader().setCascadingSectionResizes(True)
        self.tableWidget.horizontalHeader().setDefaultSectionSize(211)
        self.tableWidget.horizontalHeader().setMinimumSectionSize(65)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(12, 172, 72, 16))
        font = QtGui.QFont()
        font.setFamily("System")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.layoutWidget1 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget1.setGeometry(QtCore.QRect(409, 171, 251, 25))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.layoutWidget1)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setSpacing(12)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.pushButton_2 = QtWidgets.QPushButton(self.layoutWidget1)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_5.addWidget(self.pushButton_2)
        self.pushButton = QtWidgets.QPushButton(self.layoutWidget1)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_5.addWidget(self.pushButton)
        self.pushButton_3 = QtWidgets.QPushButton(self.layoutWidget1)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout_5.addWidget(self.pushButton_3)
        self.admin = QtWidgets.QLineEdit(self.centralwidget)
        self.admin.setGeometry(QtCore.QRect(90, 170, 291, 21))
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.admin.sizePolicy().hasHeightForWidth())
        self.admin.setSizePolicy(sizePolicy)
        self.admin.setObjectName("admin")
        self.label_info = QtWidgets.QLabel(self.centralwidget)
        self.label_info.setGeometry(QtCore.QRect(20, 500, 631, 20))
        self.label_info.setObjectName("label_info")
        MainWindows.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindows)
        QtCore.QMetaObject.connectSlotsByName(MainWindows)

    def retranslateUi(self, MainWindows):
        _translate = QtCore.QCoreApplication.translate
        MainWindows.setWindowTitle(_translate(
            "MainWindows", "Password Manager"))
        self.label.setText(_translate("MainWindows", "Password Manager"))
        self.label_2.setText(_translate("MainWindows", "Akun          "))
        self.label_3.setText(_translate("MainWindows", "Username "))
        self.label_4.setText(_translate("MainWindows", "Password  "))
        self.label_info.setText(_translate("MainWindows", "..."))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindows", "Akun"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindows", "Username"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindows", "Password"))
        self.label_5.setText(_translate("MainWindows", "Key"))
        self.pushButton.setText(_translate("MainWindows", " Save"))
        self.pushButton.clicked.connect(self.save_data)
        self.pushButton_2.setText(_translate("MainWindows", "Show"))
        self.pushButton_2.clicked.connect(self.show_data)
        self.pushButton_3.setText(_translate("MainWindows", "Hide"))
        self.pushButton_3.clicked.connect(self.hide_data)

    def encrypt_file(self, key):
        # using the generated key
        fernet = Fernet(key)

        # opening the original file to encrypt
        with open('database.db', 'rb') as file:
            original = file.read()
            file.close()

        # encrypting the file
        encrypted = fernet.encrypt(original)

        # opening the file in write mode and
        # writing the encrypted data
        with open('database.db', 'wb') as encrypted_file:
            encrypted_file.write(encrypted)
            encrypted_file.close()

    def decrypt_file(self, key):
        # using the key
        fernet = Fernet(key)

        # opening the encrypted file
        with open('database.db', 'rb') as enc_file:
            encrypted = enc_file.read()
            enc_file.close()

        # decrypting the file
        decrypted = fernet.decrypt(encrypted)

        # opening the file in write mode and
        # writing the decrypted data
        with open('database.db', 'wb') as dec_file:
            dec_file.write(decrypted)
            dec_file.close()

    def save_new_data(self, akun, username, password):
        # key generation
        key = Fernet.generate_key()
        # string the key in a file
        with open('filekey.key', 'wb') as filekey:
            filekey.write(key)
            filekey.close()

        file = open("database.db", "w")
        file.write(akun + "," + username + "," + password + ",")
        file.close()
        self.encrypt_file(key)
        self.admin.setText("")
        self.label_info.setText("INFO: Data saved")

    def save_data(self):
        akun = self.akunInput.text() if self.akunInput.text() != "" else False
        username = self.usernameInput.text() if self.usernameInput.text() != "" else False
        password = self.passwordInput.text() if self.passwordInput.text() != "" else False

        try:
            if akun and username and password:
                if os.path.exists("database.db") and self.admin.text() != "":
                    self.decrypt_file(self.admin.text())
                    with open("database.db", "r") as f:
                        db = f.read()
                        f.close()
                    file = open("database.db", "w")
                    file.write(db + akun + "," + username +
                               "," + password + ",")
                    file.close()
                    self.encrypt_file(self.admin.text())
                else:
                    self.save_new_data(akun, username, password)
            else:
                self.label_info.setText("INFO: Please input all data")
        except:
            try:
                if not os.path.exists("./backup"):
                    os.mkdir("./backup")

                # Source path
                source = "database.db"
                # Destination path
                destination = "./backup/database" + "" + ".db"

                # timestamp rename file and move file
                now = datetime.datetime.now()
                dt_string = now.strftime("%d-%m-%Y %H-%M-%S")
                destination = "./backup/%s-database.db" % dt_string

                # Copy the content of
                shutil.copyfile(source, destination)
                os.remove("database.db")

                self.save_new_data(akun, username, password)
                self.label_info.setText(
                    "INFO: New Key Generated And New Database")

            except:
                self.label_info.setText("INFO: Data Not save")
        finally:
            self.akunInput.setText("")
            self.usernameInput.setText("")
            self.passwordInput.setText("")

    def show_data(self):
        if os.path.exists("database.db"):
            if self.admin.text() != "":
                try:
                    self.decrypt_file(self.admin.text())
                    try:
                        with open("database.db", "r") as f:
                            db = f.read()
                            f.close()
                        self.encrypt_file(self.admin.text())
                        words = db.split(',')
                        words.remove("")
                        length = int(len(words) / 3)
                        row = 0
                        self.tableWidget.setRowCount(length)
                        for num in range(length):
                            self.tableWidget.setItem(
                                row, 0, QtWidgets.QTableWidgetItem(words[0+(num*3)]))
                            self.tableWidget.setItem(
                                row, 1, QtWidgets.QTableWidgetItem(words[1+(num*3)]))
                            self.tableWidget.setItem(
                                row, 2, QtWidgets.QTableWidgetItem(words[2+(num*3)]))
                            row += 1
                        self.label_info.setText("INFO: Show Data Success")
                    except:
                        self.label_info.setText("INFO: Error File Database")
                except:
                    self.admin.setText("")
                    self.label_info.setText("INFO: Invalid Key")
            else:
                self.label_info.setText("INFO: Please Input Key")
        else:
            self.label_info.setText("INFO: Database Not Found")

    def hide_data(self):
        self.label_info.setText("INFO: Hide Data")
        self.tableWidget.setRowCount(0)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindows = QtWidgets.QMainWindow()
    ui = Ui_MainWindows()
    ui.setupUi(MainWindows)
    MainWindows.show()
    sys.exit(app.exec_())
